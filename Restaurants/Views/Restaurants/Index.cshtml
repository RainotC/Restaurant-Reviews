@model IEnumerable<Restaurants.Models.Restaurant>

@{
    ViewData["Title"] = "List of restaurants";
    var averageRatings = ViewData["AverageRatings"] as Dictionary<int, double>;
}

<h1>Index</h1>
@*<form asp-controller="Restaurants" asp-action="Index" method="get">
    <p>
        Search by name: <input type="text" name="searchString" value="@ViewData["CurrentFilter"]" />
        <input type="submit" value="Filter" class="btn btn-outline-primary" />
    </p>
</form>
*@

<p>
    <a asp-action="Create">Create New</a>
</p>

<button id="btnNearby" class="btn btn-primary">Show only close to me</button>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index"
                   asp-route-sortOrder="@ViewData["NameSortParm"]"
                   asp-route-searchString="@ViewData["CurrentFilter"]">
                    Name
                    @{
                        if ((string)ViewData["NameSortParm"] == "")
                        {
                            <text>▲</text>
                        }
                        else if ((string)ViewData["NameSortParm"] == "name_desc")
                        {
                            <text>▼</text>
                        }
                    }
                </a>
            </th>


            <th>
                @Html.DisplayNameFor(model => model.MenuType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address.Street)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address.ZipCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address.City)
            </th>
            <th>
                Average Rating
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MenuType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address.Street)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address.ZipCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address.City)
            </td>
            <td>
                @{
                    var avg = averageRatings != null && averageRatings.ContainsKey(item.Id)
                    ? averageRatings[item.Id]
                    : 0;
                }
                @if (avg > 0)
                {
                    @avg.ToString("0.0")
                }
                else
                {
                    <span>No ratings</span>
                }
            </td>
            <td>
@*              left for quick changes of database if needed
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a> *@
               <a asp-action="Details" asp-route-id="@item.Id">Details</a>
            </td>
        </tr>
}
    </tbody>
</table>

@section Scripts {
    <script>
        document.getElementById("btnNearby").addEventListener("click", function () {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var lat = position.coords.latitude;
                    var lon = position.coords.longitude;
                    window.location.href = '@Url.Action("Nearby", "Restaurants")' + `?lat=${lat}&lon=${lon}`;
                }, function (error) {
                    alert("Can't access your loaction: " + error.message);
                });
            } else {
                alert("Your browser doesnt support geoloctaion");
            }
        });
    </script>
}
