@model IEnumerable<Restaurants.Models.Restaurant>

@{
    var averageRatings = ViewData["AverageRatings"] as Dictionary<int, double>;
}

<h1>List of restaurants</h1>
<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-controller="Restaurants" asp-action="Index" method="get" class="form-inline mb-3">
    <p>
        Search by name:
        <input type="text" name="searchString" value="@ViewData["CurrentFilter"]" class="form-control mr-2" />

        Menu type:
        @Html.DropDownList("menuFilter", (SelectList)ViewBag.MenuTypes, "All", new { @class = "form-control mr-2" })

        <input type="submit" value="Filter" class="btn btn-outline-primary" />
    </p>
</form>




<button id="btnNearby" class="btn btn-primary">Show only close to me</button>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index"
                   asp-route-sortOrder="@ViewData["NameSortParm"]"
                   asp-route-searchString="@ViewData["CurrentFilter"]"
                   asp-route-menuFilter="@ViewData["CurrentMenu"]"
                   asp-route-lat="@(ViewData["UserLat"] != null ? ViewData["UserLat"].ToString().Replace(',', '.') : null)"
                   asp-route-lon="@(ViewData["UserLon"] != null ? ViewData["UserLon"].ToString().Replace(',', '.') : null)">
                    Name
                    @{
                        var currentSort = (string)ViewData["CurrentSort"];
                    }

                    @if (currentSort == "name")
                    {
                        <text>▲</text>
                    }
                    else if (currentSort == "name_desc")
                    {
                        <text>▼</text>
                    }

                </a>
            </th>


            <th>
                @Html.DisplayNameFor(model => model.MenuType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address.Street)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address.ZipCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address.City)
            </th>
            <th>
                Average Rating
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.MenuType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address.Street)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address.ZipCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address.City)
            </td>
            <td>
                @{
                    var avg = averageRatings != null && averageRatings.ContainsKey(item.Id)
                    ? averageRatings[item.Id]
                    : 0;
                }
                @if (avg > 0)
                {
                    @avg.ToString("0.0")
                }
                else
                {
                    <span>No ratings</span>
                }
            </td>
            <td>
@*              left for quick changes of database if needed
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a> *@
               <a asp-action="Details" asp-route-id="@item.Id">Details</a>
            </td>
        </tr>
}
    </tbody>
</table>

@section Scripts {
    <script>
        document.getElementById("btnNearby").addEventListener("click", function () {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var lat = position.coords.latitude.toString().replace(',', '.');
                    var lon = position.coords.longitude.toString().replace(',', '.');

                    var url = '@Url.Action("Index", "Restaurants")';
                    url += `?lat=${lat}&lon=${lon}`;

                    var currentSearch = '@ViewData["CurrentFilter"]';
                    var currentSort = '@ViewData["NameSortParm"]';
                    var currentMenu = '@ViewData["CurrentMenu"]';
                    if (currentMenu) {
                        url += `&menuFilter=${encodeURIComponent(currentMenu)}`;
                    }
                    if (currentSearch) {
                        url += `&searchString=${encodeURIComponent(currentSearch)}`;
                    }
                    if (currentSort) {
                        url += `&sortOrder=${encodeURIComponent(currentSort)}`;
                    }

                    window.location.href = url;
                }, function (error) {
                    alert("Can't access your location: " + error.message);
                });
            } else {
                alert("Your browser doesn't support geolocation");
            }
        });

    </script>
}
